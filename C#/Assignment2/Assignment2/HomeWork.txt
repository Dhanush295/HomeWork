
1. What are the six combinations of access modifier keywords and what do they do?
    public: The member is accessible from any other code.
    private: The member is accessible only within its own class or struct.
    protected: The member is accessible within its own class or a derived class.
    internal: The member is accessible within the same assembly, but not from another assembly.
    protected internal: The member is accessible within its own assembly or from derived classes.
    private protected: The member is accessible within its containing class or derived classes within the same assembly.


2. What is the difference between the static, const, and readonly keywords when applied to a type member?
    static: Indicates that the member belongs to the type itself rather than to a specific instance. All instances share the same static member.
    const: Indicates that the value of the member is constant and cannot be changed. The value must be assigned at declaration and is implicitly static.
    readonly: Indicates that the value can be assigned only during initialization or in a constructor. It can be assigned different values for different instances.


3. What does a constructor do?
A constructor is a special method that is called when an instance of a class is created.
It initializes the instance of the class. Constructors can set default values, call other methods,
 and perform any other actions required to initialize the object.

4. Why is the partial keyword useful?
The partial keyword allows a class, struct, or interface to be split into multiple files.
 This can be useful for separating different concerns, making code easier to manage and work on collaboratively,
especially in large projects or when auto-generated code is involved.

5. What is a tuple?
A tuple is a data structure that can hold a finite sequence of elements of different types.
 In C#, tuples provide a lightweight way to group multiple values without having to create a separate class.


6. What does the C# record keyword do?
The record keyword defines a reference type that provides built-in functionality for value equality, immutability, and concise syntax for creating objects.
Records are often used for data models where the primary purpose is to store and transfer data.

7. What does overloading and overriding mean?
Overloading: Creating multiple methods with the same name but different parameters (signature) in the same class.
    Overloading is a compile-time polymorphism.
Overriding: Providing a new implementation of a method in a derived class that was defined in a base class.
    The method in the base class must be marked as virtual or abstract.

8. What is the difference between a field and a property?
Field: A variable that is declared directly in a class or struct. It can be accessed directly.

Property: A member that provides a flexible mechanism to read, write, or compute the value of a private field.
    Properties can have get and/or set accessors.

9. How do you make a method parameter optional?
    You can make a method parameter optional by providing a default value in the method signature.

10. What is an interface and how is it different from an abstract class?
Interface: Defines a contract that implementing classes must follow. Interfaces can only contain method signatures, properties, events, and indexers.
     They cannot contain any implementation.
Abstract class: Can contain both abstract methods (without implementation) and concrete methods (with implementation).
     Abstract classes cannot be instantiated directly.

11. What accessibility level are members of an interface?
Members of an interface are implicitly public. You cannot specify an access modifier for interface members.

12. True/False. Polymorphism allows derived classes to provide different implementations of the same method.
True. Polymorphism allows derived classes to override methods of a base class to provide different implementations.

13. True/False. The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True. The override keyword is used to provide a new implementation of a method in a derived class.

14. True/False. The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True. The new keyword is used to hide a method in the base class with a new method in the derived class.

15. True/False. Abstract methods can be used in a normal (non-abstract) class.
False. Abstract methods can only be declared in abstract classes.

16. True/False. Normal (non-abstract) methods can be used in an abstract class.
True. Abstract classes can contain both abstract and non-abstract methods.

17. True/False. Derived classes can override methods that were virtual in the base class.
True. Methods marked as virtual in the base class can be overridden in derived classes using the override keyword.

18. True/False. Derived classes can override methods that were abstract in the base class.
True. Methods marked as abstract in the base class must be overridden in derived classes.

19. True/False. In a derived class, you can override a method that was neither virtual nor abstract in the base class.
False. Only methods marked as virtual, abstract, or override can be overridden in derived classes.

20. True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
False. A class that implements an interface must provide an implementation for all of the members of the interface, unless the class is abstract.

21. True/False. A class that implements an interface is allowed to have other members that aren’t defined in the interface.
True. A class that implements an interface can have additional members that are not defined in the interface.

22. True/False. A class can have more than one base class.
False. C# does not support multiple inheritance for classes. A class can only inherit from one base class.

23. True/False. A class can implement more than one interface.
True. A class can implement multiple interfaces, allowing it to inherit the contracts of multiple types.